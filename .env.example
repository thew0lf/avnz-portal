DATABASE_URL=postgres://postgres:postgres@db:5432/avnzr_portal
PGSSL=
NEXT_PUBLIC_API_BASE=http://localhost:3001
NEXT_PUBLIC_AI_BASE=http://localhost:8000
USE_BEDROCK=false
OPENAI_API_KEY=
ASSISTANTS_MODEL=gpt-4o-mini
REDIS_URL=redis://redis:6379/0
AGENTS_JOB_TTL=86400
SERVICE_TOKEN=replace-me-strong
API_BASE_INTERNAL=http://api:3001
AWS_REGION=us-east-1
OPENAI_PROJECT=
AUTH_SECRET=
DEMO_USERS=
NEXT_PUBLIC_AI_BASE=http://localhost:8000

# Agents worker auto-start (inside ai service)
AGENTS_WORKER_AUTO=1

# Optional: ngrok for local Slack integration
# If using dockerized ngrok service, set NGROK_AUTHTOKEN to your token
NGROK_AUTHTOKEN=
# If you know your ngrok public URL, set this so the UI can render full Slack Request URL
NGROK_PUBLIC_URL=

# --- JIRA (Monitoring & Automation) ---
JIRA_EMAIL=
JIRA_API_TOKEN=
JIRA_DOMAIN=
JIRA_PROJECT_KEY=AVNZ
JIRA_DEFAULT_ORG_CODE=
JIRA_BACKFILL_ON_START=1
JIRA_BACKFILL_INTERVAL_SEC=300
JIRA_TRANSITION_ON_COMPLETE=In Review
JIRA_LOAD_BALANCE=1
JIRA_ASSIGNMENT_LOCK_LABEL=assignee-locked

# Auto-requeue stale issues (optional)
# If >0, API periodically requeues stale Jira issues by statusâ†’phase.
# Minutes threshold for staleness is configured below.
JIRA_REQUEUE_STALE_INTERVAL_SEC=0
JIRA_REQUEUE_STALE_MINUTES=30

# Optional Slack webhook for notifications
SLACK_WEBHOOK_URL=

# --- TWILIO (optional; for SMS invites) ---
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_FROM=+15555551234
# Accept-invite link base (falls back to PUBLIC_BASE_URL or http://localhost:3000/accept)
INVITE_ACCEPT_URL_BASE=http://localhost:3000/accept

# --- SENDGRID (optional; email via SMTP bridge) ---
SENDGRID_API_KEY=
SENDGRID_FROM=no-reply@example.com

# --- BOT SETTINGS ---
# PR gating: when 1 (default for bots), the bot opens a PR automatically
# when code is complete and all checks pass. Set 0 to require manual PRs.
AUTO_PR_WHEN_DONE=1
